#!/usr/bin/env python
# -*- coding: utf-8 -*-

import glob
import json
import math
import optparse
import os
import sys
import urlparse

class Point(object):
    def __init__(self):
        self.time = None
        self.lat = None
        self.lng = None
        self.hmsl = None
        self.vel_n = None
        self.vel_e = None
        self.vel_d = None

        self.glide = None

    def __repr__(self):
        return '<Point %s>' % (self.time,)

class Recording(object):
    """This class represents a single FlySight recording.
    """

    def __init__(self):
        self.path = None
        self.file_size = None
        self.name = None
        self.points = []

        self.start = None
        self.stop = None

    def open(self):
        assert not self.points

        window = []
        exit_guess_i = None
        landing_guess_i = None

        for i, line in enumerate(file(self.path)):
            if i < 2:
                continue
            curated = line.strip()
            fields = curated.split(',')

            point = Point()

            point.time = fields[0] # XXX: datetime
            point.lat, point.lng = float(fields[1]), float(fields[2])
            point.hmsl = float(fields[3])
            point.vel_n, point.vel_e, point.vel_d = \
                float(fields[4]), float(fields[5]), float(fields[6])

            point.glide = 0
            if point.vel_d:
                point.glide = math.sqrt(point.vel_e**2 + point.vel_n**2) / point.vel_d

            ##
            j = i - 2
            window.append(point.vel_d)
            if len(window) > 10:
                del window[0]

            if exit_guess_i is None and point.vel_d > 10:
                exit_guess_i = j

            if exit_guess_i and landing_guess_i is None and abs(sum(window)) / len(window) < 0.1:
                landing_guess_i = j
            ##

            self.points.append(point)

        if exit_guess_i is not None:
            while self.points[exit_guess_i].vel_d >= 1:
                exit_guess_i -= 1

        self.start = exit_guess_i
        self.stop = landing_guess_i

    def __repr__(self):
        return '<Recording %s %s %s>' % (self.name, self.file_size, self.path)


def traverse(root):
    """Returns a list of `Recording` given a root path in the file
    system. This will typically be the mount point of the GPS unit, or
    some directory where the data is copied to.
    """

    data_glob = os.path.join(root, '*/*.CSV')

    def name(path):
        path, name2 = os.path.split(path)
        _, name1 = os.path.split(path)

        return '%s %s' % (name1, name2[:-4])

    records = []
    for csv in glob.glob(data_glob):

        rec = Recording()
        rec.path = os.path.abspath(csv)
        rec.name = name(csv)

        # hint
        stat_obj = os.stat(csv)
        rec.file_size = stat_obj.st_size

        records.append(rec)

    return records


class Server(object):
    def __init__(self, options):
        self.options = options

    def handler(self, path, query):
        query_dict = dict(urlparse.parse_qsl(query))

        s = ''
        if path == '/':
            for recording in traverse(self.options.data):
                recording.open()

                s += '<a href="/view?path=%s">%s</a> (%s %s)<br>' % (recording.path, recording.name, recording.start, recording.stop)

        elif path == '/data':
            recording = Recording()
            recording.path = query_dict['path']
            recording.open()

            points = []
            for i, point in enumerate(recording.points):
                #if i >= recording.start and i <= recording.stop:
                points.append({
                            'i': i,
                            'lat': point.lat,
                            'lng': point.lng,
                            'glide': point.glide,
                            'ts': point.time,
                        })

            ret = {
                'points': points
                }

            s += json.dumps(ret)

        elif path == '/view':

            s += file('view.html').read()

        return [s]

    def run(self):
        from wsgiref.simple_server import make_server

        def handler(environ, start_response):
            status = '200 OK'
            headers = [('Content-type', 'text/html')]
            start_response(status, headers)
            return self.handler(environ['PATH_INFO'],
                                environ['QUERY_STRING'])

        httpd = make_server('', 8000, handler)
        print "Serving on port 8000..."
        httpd.serve_forever()



def main():
    parser = optparse.OptionParser()
    parser.add_option("-d", "--data", dest="data",
                  help="flysight data directory", metavar="PATH")
    options, args = parser.parse_args()

    if not options.data:
        parser.error('no data directory (--data) given')

    server = Server(options)
    server.run()


if __name__ == '__main__':
    main()
