#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2013 Björn Edström <be@bjrn.se>
# See LICENSE for details.

"""Main program.

Some resources:

flysight:
http://flysight.ca/wiki/index.php?title=File_format
https://github.com/flysight/flysight/tree/master/FlySight

google maps:
https://developers.google.com/maps/documentation/javascript/reference
"""

import glob
import json
import math
import optparse
import os
import sys
import urlparse


class Point(object):
    """A single data point from the FlySight GPS.
    """

    def __init__(self):
        # data from GPS
        self.time = None
        self.lat = None
        self.lng = None
        self.h_msl = None # height mean sea level
        self.vel_n = None # m/s
        self.vel_e = None
        self.vel_d = None

        # computed
        self.vel_f = None
        self.glide = None

    def __repr__(self):
        return '<Point %s>' % (self.time,)


class Recording(object):
    """This class represents a single FlySight recording.
    """

    # A guess what a reasonable down velocity is when the actor is
    # falling
    HINT_FALLING_SURELY = 10.0 # m/s

    # A guess what the down velocity will be right after exit.
    # Note: this should not be too low, otherwise a simple
    # bump in an aircraft or similar could interfere.
    HINT_FALLING_START = 3.0 # m/s

    def __init__(self):
        self.path = None
        self.file_size = None
        self.name = None
        self.points = []

        # reasonable guess of exit and landing
        self.start = None
        self.stop = None

    def open(self):
        assert not self.points

        window = []
        exit_guess_i = None
        landing_guess_i = None

        for i, line in enumerate(file(self.path)):
            if i < 2:
                continue
            curated = line.strip()
            fields = curated.split(',')

            point = Point()

            point.time = fields[0] # XXX: datetime
            point.lat, point.lng = float(fields[1]), float(fields[2])
            point.h_msl = float(fields[3])
            point.vel_n, point.vel_e, point.vel_d = \
                float(fields[4]), float(fields[5]), float(fields[6])

            # calculate forward velocity
            point.vel_f = math.sqrt(point.vel_e**2 + point.vel_n**2)

            # calculate glide ratio
            point.glide = 0
            if point.vel_d:
                point.glide = point.vel_f / point.vel_d

            # guess exit and landing
            j = i - 2
            window.append(point.vel_d)
            if len(window) > 10:
                del window[0]

            if exit_guess_i is None and \
                    point.vel_d > self.HINT_FALLING_SURELY:
                exit_guess_i = j

            if exit_guess_i and landing_guess_i is None and \
                    abs(sum(window)) / len(window) < 0.1:
                landing_guess_i = j

            self.points.append(point)

        if exit_guess_i is not None:
            while self.points[exit_guess_i].vel_d >= \
                    self.HINT_FALLING_START:
                exit_guess_i -= 1

        self.start = exit_guess_i
        self.stop = landing_guess_i

    def __repr__(self):
        return '<Recording %s %s %s>' % (self.name, self.file_size,
                                         self.path)


def traverse(root):
    """Returns a list of `Recording` given a root path in the file
    system. This will typically be the mount point of the GPS unit, or
    some directory where the data is copied to.
    """

    data_glob = os.path.join(root, '*/*.CSV')

    def name(path):
        path, name2 = os.path.split(path)
        _, name1 = os.path.split(path)

        return '%s %s' % (name1, name2[:-4])

    records = []
    for csv in sorted(glob.glob(data_glob)):

        rec = Recording()
        rec.path = os.path.abspath(csv)
        rec.name = name(csv)

        # hint
        stat_obj = os.stat(csv)
        rec.file_size = stat_obj.st_size

        records.append(rec)

    return records


class Server(object):
    def __init__(self, options):
        self.options = options

    def handler(self, path, query):
        """Web server request handler."""

        query_dict = dict(urlparse.parse_qsl(query))

        s = ''
        if path == '/':

            s += '<h1>Flajt</h1>'

            for recording in traverse(self.options.data):
                recording.open()

                prob = ''
                if recording.start or recording.stop:
                    prob = '<strong>%s</strong>' % len(recording.points)
                else:
                    prob = '%s' % len(recording.points)

                s += '<a href="/view?path=%s">%s</a> (%s)<br>' % (
                    recording.path, recording.name, prob)

        elif path == '/data':
            path = query_dict['path']

            found = False
            for recording in traverse(self.options.data):
                if recording.path == path:
                    found = True
            if not found:
                raise AssertionError('hack hack')

            recording = Recording()
            recording.path = query_dict['path']
            recording.open()

            points = []
            for i, point in enumerate(recording.points):
                points.append({
                            'i': i,
                            'lat': point.lat,
                            'lng': point.lng,
                            'glide': point.glide,
                            'ts': point.time,
                            'h_msl': point.h_msl,
                            'vel_f': point.vel_f,
                            'vel_d': point.vel_d,
                        })

            ret = {
                'points': points,
                'start': recording.start or 0,
                'stop': recording.stop or len(recording.points) - 1,
                }

            s += json.dumps(ret)

        elif path == '/view':

            s += file('view.html').read()

        return [s]

    def run(self):
        """Start the server."""

        from wsgiref.simple_server import make_server

        def handler(environ, start_response):
            status = '200 OK'
            headers = [('Content-type', 'text/html')]
            start_response(status, headers)
            return self.handler(environ['PATH_INFO'],
                                environ['QUERY_STRING'])

        if self.options.host != 'localhost':
            print 'WARNING'
            print 'Only run the server on localhost!'
            print 'This web server will read arbitrary files on disk!'

        httpd = make_server(self.options.host, self.options.port, handler)
        print 'Serving on %s:%s...' % (self.options.host, self.options.port)
        try:
            httpd.serve_forever()
        except KeyboardInterrupt:
            pass
        print 'Shutting down...'


def main():
    parser = optparse.OptionParser()
    parser.add_option("-d", "--data", dest="data", metavar="PATH",
                      help="flysight data directory")
    parser.add_option("-p", "--port", dest="port", type=int,
                      default=8000, metavar="PORT",
                      help="port number to listen [%default]")
    parser.add_option("-H", "--host", dest="host",
                      default="localhost", metavar="HOST",
                      help="host to listen [%default]")
    options, args = parser.parse_args()

    if not options.data:
        parser.error('no data directory (--data) given')

    server = Server(options)
    server.run()


if __name__ == '__main__':
    main()
